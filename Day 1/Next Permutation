class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int ind1 = 0,ind2=0;
        bool flag = true;
        for(int i=nums.size()-1;i-1>=0;i--){
            if(nums[i-1]<nums[i]){
                ind1 = i-1;
                flag = false;
                break;
            }
        }
        if(flag){
            reverse(nums.begin(),nums.end());
        }
        else{
            for(int i=nums.size()-1;i>ind1;i--){
                if(nums[i]>nums[ind1]){
                    ind2 = i;
                    break;
                }
            }
            swap(nums[ind1],nums[ind2]);
            reverse(nums.begin()+ind1+1,nums.end());
        }
        
    }
};

//   Striver's More Cleaner Code
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), k, l;
    	for (k = n - 2; k >= 0; k--) {
            if (nums[k] < nums[k + 1]) {
                break;
            }
        }
    	if (k < 0) {
    	    reverse(nums.begin(), nums.end());
    	} else {
    	    for (l = n - 1; l > k; l--) {
                if (nums[l] > nums[k]) {
                    break;
                }
            } 
    	    swap(nums[k], nums[l]);
    	    reverse(nums.begin() + k + 1, nums.end());
        }
    }
};
