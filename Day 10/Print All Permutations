// Approach 1: Hashing : - We Stored the visited elements 
class Solution {
public:
    
    void permutations(vector<int> & nums, int *visited,vector<vector<int>> &ans,vector<int>temp){
        if(temp.size()==nums.size()){
            ans.push_back(temp);
            return;
        }
        for(int j=0;j<nums.size();j++){
            if(visited[j]==0)
            {
                temp.push_back(nums[j]);
                visited[j] =1;
                permutations(nums,visited,ans,temp);
                visited[j] = 0;
                temp.pop_back();
            }
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        int *visited = new int[nums.size()]{0};
        vector<int> small;
        vector<vector<int>> ans;
        permutations(nums,visited,ans,small);
        return ans;
    }
};
//  Approach 2: Swapping
class Solution {
public:
    void permutations(vector<int> nums, int i, vector<vector<int>> &ans){
        if(i==nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int j=i;j<nums.size();j++){
            swap(nums[i],nums[j]);
            permutations(nums,i+1,ans);
            swap(nums[j],nums[i]);
        }
    } 
    vector<vector<int>> permute(vector<int>& nums) {
        int index = 0;
        vector<vector<int>> ans;
        permutations(nums,index,ans);
        return ans;
    }
};
