#include<bits/stdc++.h>
using namespace std;

// Using Sorting
int findDuplicate(vector < int > & arr) {
  int n = arr.size();
  sort(arr.begin(), arr.end());
  for (int i = 0; i < n - 1; i++) {
    if (arr[i] == arr[i + 1]) {
      return arr[i];
    }
  }
}
int main() {
  vector < int > arr;
  arr = {1,3,4,2,2};
  cout << "The duplicate element is " << findDuplicate(arr) << endl;
}

// Using Map
int findDuplicate(vector<int> &arr, int n){
	// Write your code here.
//     int n = arr.size();
  unordered_map<int,int> map;
    for(int i:arr){
        if(map[i]) return i;
        map[i] = 1;
    }
    return 0;
}

// Using Linked List Cycle Method
#include <bits/stdc++.h> 
int findDuplicate(vector < int > & nums,int n) {
    int slow = nums[0];
    int fast = nums[0];
    do {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } 
    while (slow != fast);
    fast = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow;
}
