//     My First Code
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        sort(intervals.begin(),intervals.end());
        pair<int,int> p;
        p.first = intervals[0][0];
        p.second = intervals[0][1];
        vector<vector<int>> ans;
        for(int i=1;i<intervals.size();i++){
            if(intervals[i][0]>p.second){
                vector<int>v = {p.first,p.second};
                ans.push_back(v);
                p.first = intervals[i][0];
                p.second = intervals[i][1];
                continue;
            }
            else if(intervals[i][1]<p.first){
                vector<int>v = {p.first,p.second};
                ans.push_back(v);
                p.first = intervals[i][0];
                p.second = intervals[i][1];
                continue;
            } 
            else{
                p.first = min(p.first,intervals[i][0]);
                p.second = max(p.second,intervals[i][1]);
            }
        }
        vector<int>v = {p.first,p.second};
        ans.push_back(v);
        return ans;
    }
};
//    Rewrite My Code
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        pair<int,int> p;
        p.first = intervals[0][0];
        p.second = intervals[0][1];
        vector<vector<int>> ans;
        for(int i=0;i<intervals.size();i++){
            if(intervals[i][0]<=p.second){
                p.second = max(p.second,intervals[i][1]);
            } 
            else{
                vector<int>v = {p.first,p.second};
                ans.push_back(v);
                p.first = intervals[i][0];
                p.second = intervals[i][1];                
            }
        }
        vector<int>v = {p.first,p.second};
        ans.push_back(v);
        return ans;
    }
};

// Striver's Code I
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        vector<vector<int>> ans;
        vector<int> temp = intervals[0];
        for(auto it:intervals){
            if(it[0]<=temp[1]){
                temp[1] = max(temp[1],it[1]);
            } 
            else{
                ans.push_back(temp);
                temp=it;                
            }
        }
        ans.push_back(temp);
        return ans;
    }
};
// Striver's Code II
#include<bits/stdc++.h>

using namespace std;
vector < vector < int >> merge(vector < vector < int >> & intervals) {

  sort(intervals.begin(), intervals.end());
  vector < vector < int >> merged;

  for (int i = 0; i < intervals.size(); i++) {
    if (merged.empty() || merged.back()[1] < intervals[i][0]) {
      vector < int > v = {
        intervals[i][0],
        intervals[i][1]
      };

      merged.push_back(v);
    } else {
      merged.back()[1] = max(merged.back()[1], intervals[i][1]);
    }
  }

  return merged;
}
