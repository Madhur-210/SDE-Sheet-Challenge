// LeetCode
class Solution {
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        double smallans=1;
        if(n%2){
            if(n<0) smallans = 1/x;
            else smallans = x;
        }
        if(n==1) return x;
        if(n==-1) return 1/x;
        double ans=1;
        ans = myPow(x,n/2);
        ans *= ans;
        ans = ans*smallans;
        return ans;
    }
};

// Code Studio  //   Different Variant
#include <bits/stdc++.h> 
int modularExponentiation(int x, int n, int m) {
    // Write your code here.
    if(n==0) return 1;
    int smallans=1;
    if(n%2){
        smallans = x;
    }
    if(n==1) return x%m;
    long ans=1;
    ans = modularExponentiation(x,n/2,m);
    ans *= ans;
    ans%=m;
    ans = ans*smallans;
    return ans%m;
}
