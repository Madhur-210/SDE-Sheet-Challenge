int merge(int input[],int si ,int ei){
    int size=ei-si+1;
    int mid=(si+ei)/2;
    int output[size];
    int i=si,j=mid+1,k=0,inv = 0;
    while(i<=mid && j<=ei){
        long inp = input[j];
        inp*=2;
        if(input[i]<=inp){
            // output[k]=input[i];
            k++;
            i++;
        }
        else{
            inv += (mid-i+1);
            // output[k]=input[j];
            k++;
            j++;
        }
    }
        i=si,j=mid+1,k=0;
        while(i<=mid && j<=ei){
        if(input[i]<=input[j]){
            output[k]=input[i];
            k++;
            i++;
        }
        else{
            // inv += (mid-i+1);
            output[k]=input[j];
            k++;
            j++;
        }
    }
    while(i<=mid){
        output[k]=input[i];
        k++;
        i++;
    }
    while(j<=ei){
        output[k]=input[j];
        k++;
        j++;
    }
    for(int i=0;i<size;i++){
        input[si+i]=output[i];
    }
    return inv;
}
int mergeSort(int input[],int s,int e){
    if(s>=e){
        return 0;
    }
    int mid=(s+e)/2;
    int ans = 0;
    ans += mergeSort(input,s,mid);
    ans += mergeSort(input,mid+1,e);
    ans += merge(input,s,e);
    return ans;
}
int mergeSort(int input[], int size){
    // Write your code here
      return mergeSort(input,0,size-1);
}
int reversePairs(vector<int>& arr) {
    int newarr[100000];
    int index = 0;
    for(int i:arr){
        newarr[index++] = i;
    }
    return mergeSort(newarr,arr.size());
}

// Striver's Cleaner Code

int Merge(vector < int > & nums, int low, int mid, int high) {
  int total = 0;
  int j = mid + 1;
  for (int i = low; i <= mid; i++) {
    while (j <= high && nums[i] > 2 LL * nums[j]) {
      j++;
    }
    total += (j - (mid + 1));
  }

  vector < int > t;
  int left = low, right = mid + 1;

  while (left <= mid && right <= high) {

    if (nums[left] <= nums[right]) {
      t.push_back(nums[left++]);
    } else {
      t.push_back(nums[right++]);
    }
  }

  while (left <= mid) {
    t.push_back(nums[left++]);
  }
  while (right <= high) {
    t.push_back(nums[right++]);
  }

  for (int i = low; i <= high; i++) {
    nums[i] = t[i - low];
  }
  return total;
}
int MergeSort(vector < int > & nums, int low, int high) {

  if (low >= high) return 0;
  int mid = (low + high) / 2;
  int inv = MergeSort(nums, low, mid);
  inv += MergeSort(nums, mid + 1, high);
  inv += Merge(nums, low, mid, high);
  return inv;
}
int reversePairs(vector < int > & arr) {
  return MergeSort(arr, 0, arr.size() - 1);
}
