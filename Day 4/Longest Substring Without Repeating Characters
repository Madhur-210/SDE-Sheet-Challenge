//  T-O(2*N)    S-O(N)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i=0;
        int j=0;
        int ans = 0;
        int len = 0;
        unordered_map<int,int>map;
        while(j<s.size()){
            if(map[s[j]]==0){
                len = j-i+1;
                ans = max(ans,len);
                map[s[j]] = 1;
                j++;
            }
            else {
                while(i<j && map[s[j]]){
                    map[s[i]] = 0;
                    i++;
                }
            }
        }
        return ans;
    }
};

// T-O(N)    S-O(2*N)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int i=0;
        int j=0;
        int ans = 0;
        int len = 0;
        unordered_map<int,int>map,index;
        while(j<s.size()){
            if(map[s[j]]==0){
                len = j-i+1;
                ans = max(ans,len);
                map[s[j]] = 1;
                index[s[j]] = j;
                j++;
            }
            else {
                i=max(i,index[s[j]]+1);     // we don't have to go to the left side
                map[s[j]] = 0;
                
            }
        }
        return ans;
    }
};
// T- O(N)  S- O(N)
int lengthofLongestSubstring(string s) {
      vector < int > mpp(256, -1);

      int left = 0, right = 0;
      int n = s.size();
      int len = 0;
      while (right < n) {
        if (mpp[s[right]] != -1)
          left = max(mpp[s[right]] + 1, left);

        mpp[s[right]] = right;

        len = max(len, right - left + 1);
        right++;
      }
      return len;
}
