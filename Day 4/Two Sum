// Using Map

vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> map;
        int index = 0;
        vector<int>ans;
        
        for(int i:nums){
            if(map.count(target-i)){
                ans.push_back(index);
                ans.push_back(map[target-i]);
                return ans;
            }
            map[i] = index++;
        } 
        
        return ans;
}
 // Using Sorting and Two Pointers
 
 #include <bits/stdc++.h> 
vector<vector<int>> pairSum(vector<int> &arr, int s){
    // Write your code here.
    sort(arr.begin(),arr.end());
    int i=0,j=arr.size()-1;
    vector<vector<int>>ans;
    while(i<j){
        vector<int>smallans;
        if(arr[i]+arr[j] == s){
            if(arr[i]==arr[j]){
                int t=0;
                while(t<(j-i)*(j-i+1)/2){
                    ans.push_back({arr[i],arr[i]});
                    t++;
                }
                return ans;
            }
            int cnt1=1,cnt2=1;
            while(i+1<j && arr[i]==arr[i+1]){
                i++;
                cnt1++;
            }
            while(i+1<j && arr[j]==arr[j-1]){
                cnt2++;
                j--;
            }
            int t = cnt1*cnt2;
            while(t--){
                ans.push_back({arr[i],arr[j]});
            }
            i++;
            j--;
        }
        else if(arr[i]+arr[j]<s){
            i++;
        }
        else j--;
    }
    return ans;
}
