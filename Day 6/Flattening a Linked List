 //    My Code
Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2)
{
    //Write your code here
    if(head1==NULL){
        return head2;
    }
    if(head2==NULL){
        return head1;
    }
    Node *head=NULL;
    Node *tail=NULL;
    if(head1->data<head2->data){
        head=head1;
        tail=head1;
        head1=head1->child;
    }
    else{
        head=head2;
        tail=head2;
        head2=head2->child; }
    while(head1!=NULL && head2!=NULL){
        if(head1->data<head2->data){
            tail->child=head1;
            tail=tail->child;
            head1=head1->child;
        }
        else{
            tail->child=head2;
            tail=tail->child;
            head2=head2->child;   
        }
    }
    if(head1!=NULL){
        tail->child=head1;
    }
    if(head2!=NULL){
        tail->child=head2;
    }
    return head;
}
Node* flattenLinkedList(Node* head) 
{
    // Write your code here
    if(head==NULL || head->next==NULL) return head;
    Node* ans = head;
    Node* h1 = head;
        Node* h2 = head->next;
        head->next = NULL;
        Node* h3 = h2->next;
        h2->next = NULL;
    while(h3){
        h1=mergeTwoSortedLinkedLists(h1, h2);
        h2 = h3 ;
        h3=h3->next;
        h2->next=NULL;
    }
    h1=mergeTwoSortedLinkedLists(h1, h2);
    return ans;
}

//  Passing the last test case on code studio
Node* mergeTwoLists(Node* a, Node* b) {
    
    Node *temp = new Node(0);
    Node *res = temp; 
    
    while(a != NULL && b != NULL) {
        if(a->data < b->data) {
            temp->child = a; 
            temp = temp->child; 
            a = a->child; 
            temp-> next= NULL;
        }
        else {
            temp->child = b;
            temp = temp->child; 
            b = b->child; 
            temp-> next= NULL;
        }
    }
    
    if(a) temp->child = a; 
    else temp->child = b; 
    
    return res -> child; 
    
}
Node *flattenLinkedList(Node *root)
{
   
        if (root == NULL || root->next == NULL) 
            return root; 
  
        // recur for list on right 
        root->next = flattenLinkedList(root->next); 
  
        // now merge 
        root = mergeTwoLists(root, root->next); 
  
        // return the root 
        // it will be in turn merged with its left 
        return root; 
}
