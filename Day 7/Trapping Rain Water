// Brute Force
class Solution {
public:
    int trap(vector<int>& h) {
        int ans = 0;
        for(int i=0;i<h.size();i++){
            int ml = 0;
            int mr = 0;
            int ti=i,tj=i;
            while(ti>=0){
                ml = max(ml,h[ti]);
                ti--;
            }
            while(tj<h.size()){
                mr = max(mr,h[tj]);
                tj++;
            }
            ans += min(ml,mr) - h[i];
        }
        return ans;
    }
};
// Better O(3*N) O(2*N)
class Solution {
    public:
    int trap(vector<int>& arr) {
        int n = arr.size();
        int prefix[n], suffix[n];
        prefix[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = max(prefix[i - 1], arr[i]);
        }
        suffix[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = max(suffix[i + 1], arr[i]);
        }
        int waterTrapped = 0;
        for (int i = 0; i < n; i++) {
            waterTrapped += min(prefix[i], suffix[i]) - arr[i];
        }
        return waterTrapped;
    }
};
// Best O(N) O(1)
int trap(vector < int > & height) {
  int n = height.size();
  int left = 0, right = n - 1;
  int res = 0;
  int maxLeft = 0, maxRight = 0;
  while (left <= right) {
    if (height[left] <= height[right]) {
      if (height[left] >= maxLeft) {
        maxLeft = height[left];
      } else {
        res += maxLeft - height[left];
      }
      left++;
    } else {
      if (height[right] >= maxRight) {
        maxRight = height[right];
      } else {
        res += maxRight - height[right];
      }
      right--;
    }
  }
  return res;
}
